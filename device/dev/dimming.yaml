#
# Dimming test config
#
# This is only used for testing dimming
#
# !!! FOR TESTING PURPOSES !!!
#
# What it does:
#
# - auto dimming functionality
# - timeouts for sleep and dimming
# - sleep / wakeup process
#


# Configuration Variables
substitutions:
  # Version of this yaml config file
  yaml_version: '0.2.0'
  # Name of the device
  name: nspanel-test
  # Friendly name of the device
  friendly_name: 'NSPanel HAUI Test'
  # Accounts and URLs
  ota_password: !secret ota_password
  encryption_key: !secret api_encryption_key
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  web_username: !secret web_username
  web_password: !secret web_password


# ESP Configuration
esp32:
  board: esp32dev


# ESPHome Configuration
esphome:
  name: $name
  friendly_name: $friendly_name


# Logger Configuration
logger:
  level: DEBUG


# OTA Configuration
ota:
  password: $ota_password
  safe_mode: true
  reboot_timeout: 3min
  num_attempts: 3


# WIFI Configuration
wifi:
  # use_address is useful when there are issues with renaming of the device name
  #use_address: nspanel.local
  ssid: $wifi_ssid
  password: $wifi_password
  power_save_mode: none
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $name
    password: $wifi_password


# Captive Portal
captive_portal:


# Web Server
web_server:
  port: 80
  auth:
    username: $web_username
    password: $web_password


# Internal buzzer
output:
  - platform: ledc
    id: haui_rtttl_out
    pin:
      number: 21


# Ringtone Music Support
rtttl:
  id: haui_rtttl
  output: haui_rtttl_out


# UART for Display
uart:
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200
  id: haui_uart


# Display
display:

  - platform: nextion
    id: haui_disp
    uart_id: haui_uart
    # set the display manually as initialized
    on_setup:
      then:
        # do not continue until api is not connected
        - wait_until:
            api.connected
        # Restore brightness on display
        - number.set:
            id: brightness_full
            value: !lambda 'return int(id(brightness_full).state);'
        # Restore dimmed brightness on display
        - number.set:
            id: brightness_dim
            value: !lambda 'return int(id(brightness_dim).state);'
        - delay: 1s
        # set as initialized
        - lambda: |-
            id(haui_init) = true;

    on_page:
      then:
        - lambda: |-
            ESP_LOGD("haui", "on_page %d", x);
            id(page).publish_state(x);


# API configuration
api:

  # API Password for HA
  encryption:
    key: $encryption_key

  # Available services
  services:

    # Service to send a command
    # This will send a command to the nextion display
    - service: send_command
      variables:
        cmd: string
      then:
        - lambda: id(haui_disp).send_command(cmd.c_str());

    # Service to reset the last interaction value
    - service: reset_last_interaction
      then:
        - lambda: id(update_last_interaction).execute(-1, 0);


# Globals Configuration
globals:

  # Display initialization state
  - id: haui_init
    type: bool
    restore_value: false

  # Display state
  # Values:
  # - 0 Off
  # - 1 On
  # - 2 Dim
  - id: haui_display_state
    type: int
    restore_value: false


# Interval Configuration
interval:

  # Display related checks
  - interval: 100ms
    then:
      - lambda: |-
          id(update_display_state).execute();
          id(update_display).execute();

  # Interaction timeout check
  - interval: 50ms
    then:
      - lambda: |-
          id(update_interaction).execute();


# Script Configuration
script:

  # Script to update the last interaction time
  # Its possible to add an offset to the time by setting offset to a value > 0 or < 0
  - id: update_last_interaction
    mode: restart
    parameters:
      new_value: int
      offset: float
    then:
      - lambda: |-
          int32_t interaction_val = new_value;
          if (new_value == -1) {
              int32_t time_now = millis() / 100; // use 0.1s as the lowest change
              int32_t offset_ = offset * 10; // use 0.1s as the lowest change
              if (time_now < offset_) {
                // overflow occurred, reset interaction_val
                interaction_val = 0;
              } else {
                interaction_val = time_now - offset_;
              }
          }
          if (id(last_interaction).state != interaction_val) {
            id(last_interaction).publish_state(interaction_val);
          }

  # Script to change the page based on the page name
  - id: goto_page
    parameters:
      page: string
    then:
      - lambda: |-
          ESP_LOGI("haui", "goto_page %s", page.c_str());
          id(haui_disp).goto_page(page.c_str());

  # Script to set the brightness
  - id: set_brightness
    parameters:
      intensity: int
    then:
      - lambda: |-
          float percent_on = float(intensity)/100;
          percent_on = percent_on > 1 ? 1 : percent_on;
          percent_on = percent_on < 0 ? 0 : percent_on;
          ESP_LOGD("haui", "Script set_brightness: %i - %f", intensity, percent_on);
          id(haui_disp).set_backlight_brightness(percent_on);

  # Script to update display related changes
  - id: update_display
    then:
      - lambda: |-
          // brightness
          int brightness_val = int(id(current_brightness).state);
          if (!id(use_auto_dimming).state) {
            int full_brightness = int(id(brightness_full).state);
            if (brightness_val != full_brightness) {
              ESP_LOGD("haui", "Update brightness to full: %i -> %i", brightness_val, full_brightness);
              id(set_brightness).execute(full_brightness);
            }
            return;
          }
          // timeout values
          int timeout_dim_val = int(id(timeout_dim).state);
          int timeout_sleep_val = int(id(timeout_sleep).state);
          // duration of dimming
          float duration_dim_val = id(duration_dim).state;
          // last interaction with device
          int last_interaction_val = int(id(last_interaction).state);
          // time diff in seconds
          float diff_seconds = 0;
          static float last_diff_seconds = 0;

          if (last_interaction_val > 0) {
            // get timings for last interaction
            unsigned long duration_now = millis() / 10; // use 0.01s as the lowest change
            if (duration_now < last_interaction_val) {
              // overflow occurred, reset variables
              last_interaction_val = 0;
              duration_now = 0;
            }
            diff_seconds = ((float)(duration_now/10) - last_interaction_val) / 10;
          }

          // the target and current brightness
          int target_brightness = 0;
          int new_brightness = brightness_val;

          // screen timeout means brightness goes off -> target 0
          if (timeout_sleep_val > 0 && diff_seconds > timeout_sleep_val) {

            if (brightness_val != 0) {
              // calculate new brightness: current is brightness_val, target is target_brightness
              new_brightness = target_brightness;
              ESP_LOGD("haui", "Target brightness for Off: %i -> %i", brightness_val, target_brightness);
            }

            if (duration_dim_val > 0 && target_brightness < brightness_val) {
              float step_size = (float)brightness_val / ((duration_dim_val - (diff_seconds - timeout_sleep_val)) * 10);
              new_brightness = max(target_brightness, int(brightness_val - step_size));
              ESP_LOGV("haui", "Step size %i - %i - %i", brightness_val, new_brightness, target_brightness);
            } else if (duration_dim_val == 0 && target_brightness < brightness_val) {
              new_brightness = target_brightness;
            }
            if (new_brightness != brightness_val) {
              ESP_LOGD("haui", "New brightness for off: %i -> %i", brightness_val, new_brightness);
            }

          // dim timeout means brightness goes to brightness_dim
          } else if (timeout_dim_val > 0 && diff_seconds > timeout_dim_val) {

            target_brightness = int(id(brightness_dim).state);
            int curr_duration = diff_seconds - timeout_dim_val;
            if (duration_dim_val > 0 and curr_duration <= duration_dim_val) {
              if (target_brightness < brightness_val) {
                  float step_size = (brightness_val - target_brightness) / ((duration_dim_val - (diff_seconds - timeout_dim_val)) * 10) + 1;
                  new_brightness = max(target_brightness, int(brightness_val - step_size));
                  ESP_LOGD("haui", "Step size %i - %i - %i", brightness_val, new_brightness, target_brightness);
              } else if (target_brightness > brightness_val) {
                  float step_size = (target_brightness - brightness_val) / ((duration_dim_val - (diff_seconds - timeout_dim_val)) * 10) + 1;
                  new_brightness = min(target_brightness, int(brightness_val + step_size));
                  ESP_LOGD("haui", "Step size %i - %i - %i", brightness_val, new_brightness, target_brightness);
              }
            } else {
              new_brightness = target_brightness;
            }

            if (new_brightness != brightness_val) {
              ESP_LOGD("haui", "New brightness for dimming: %i -> %i", brightness_val, new_brightness);
            }

          // no active timeout, just use full brightness
          } else {
            target_brightness = int(id(brightness_full).state);
            if (target_brightness != brightness_val) {
              new_brightness = target_brightness;
              ESP_LOGD("haui", "Target brightness for Full: %i -> %i", brightness_val, target_brightness);
            }
          }
          if (new_brightness != brightness_val) {
            ESP_LOGD("haui", "Setting brightness for screen: %i", new_brightness);
            if (id(haui_display_state)) {
              id(set_brightness).execute(new_brightness);
            }
          }

          // remember current diff in seconds
          last_diff_seconds = diff_seconds;

  # Script to update display state related changes
  - id: update_display_state
    then:
      - lambda: |-
          // timeout values
          int timeout_dim_val = int(id(timeout_dim).state);
          int timeout_sleep_val = int(id(timeout_sleep).state);
          int current_state = int(id(haui_display_state));
          int new_state = current_state;

          // duration of dimming
          float duration_dim_val = id(duration_dim).state;
          // last interaction with device
          int last_interaction_val = int(id(last_interaction).state);
          // time passed since last interaction
          float diff_seconds = 0;
          if (last_interaction_val > 0) {
            // get timings for last interaction
            unsigned long duration_now = millis() / 10; // use 0.01s as the lowest change
            if (duration_now < last_interaction_val) {
              // overflow occurred, reset variables
              last_interaction_val = 0;
              duration_now = 0;
            }
            diff_seconds = ((float)(duration_now/10) - last_interaction_val) / 10;
          }

          // update display state
          if (diff_seconds > (timeout_sleep_val + duration_dim_val)) {
            if (current_state != 0) {
              new_state = 0;
            }
          } else if (diff_seconds > (timeout_dim_val + duration_dim_val)) {
            if (current_state != 1) {
              new_state = 1;
            }
          } else if (current_state != 2) {
            new_state = 2;
          }

          // if the state changed
          if (new_state != current_state) {
            id(haui_display_state) = new_state;
            if (new_state == 0) {
              ESP_LOGI("haui", "Display is going to sleep");
              id(haui_disp).sleep(true);
            } else if (current_state == 0) {
              ESP_LOGI("haui", "Display is waking up");
              id(haui_disp).sleep(false);
            }
          }

  # Script to update interaction related changes
  - id: update_interaction
    then:
      - lambda: |-
          const uint8_t timeout = 1;  // timeout after 1 sec
          uint32_t prev_time = id(last_interaction).state;
          uint32_t curr_time = millis() / 1000;
          int curr_x = id(touch_x).state;
          int curr_y = id(touch_y).state;
          static int prev_x = 0;
          static int prev_y = 0;
          bool is_touch = false;
          bool is_button = false;

          if (curr_x != 0 && curr_y != 0) {
            // ensure prev time is set
            if (prev_time == 0)
                prev_time = curr_time;
            if (prev_time + timeout >= curr_time) {
              // no timeout, set is_touch
              is_touch = true;
            }
          }

          if (is_touch) {
            // touch active
            if (!id(touch).state) {
              ESP_LOGD("haui", "Touch Press (%d,%d)", curr_x, curr_y);
              id(touch).publish_state(true);
            }
          } else {
            if (id(touch).state) {
              prev_time = 0;
              ESP_LOGD("haui", "Touch Release (%d,%d)", prev_x, prev_y);
              id(touch).publish_state(false);
            }
          }

          prev_x = curr_x;
          prev_y = curr_y;


# Number Configuration
number:

  # Screen Full brightness
  - platform: template
    name: Brightness Full
    id: brightness_full
    entity_category: config
    unit_of_measurement: '%'
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 50.0
    restore_value: true
    optimistic: true
    on_value:
      then:
        - lambda: |-
            // reset last interaction, this way the currently set brightness
            // is updated
            id(update_last_interaction).execute(-1, 0);

  # Screen brightness when dimmed down
  - platform: template
    name: Brightness Dimmed
    id: brightness_dim
    entity_category: config
    unit_of_measurement: '%'
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 20.0
    restore_value: true
    optimistic: true
    on_value:
      then:
        - lambda: |-
            //  reset last interaction, set offset to end of dimming
            id(update_last_interaction).execute(-1, id(timeout_dim).state + id(duration_dim).state);

  # Screen brightness when dimmed down
  - platform: template
    name: Duration Dimming
    id: duration_dim
    entity_category: config
    unit_of_measurement: 's'
    min_value: 0.0
    max_value: 5.0
    step: 0.1
    initial_value: 2.0
    restore_value: true
    optimistic: true
    on_value:
      then:
        - lambda: |-
            //  reset last interaction, set offset to begin of dimming
            id(update_last_interaction).execute(-1, id(timeout_dim).state - 0.1);

  # Dim timeout
  - platform: template
    name: Timeout Dimming
    id: timeout_dim
    entity_category: config
    unit_of_measurement: 's'
    min_value: 0
    max_value: 3600
    step: 1
    initial_value: 10.0
    restore_value: true
    optimistic: true
    on_value:
      then:
        - lambda: |-
            //  reset last interaction
            id(update_last_interaction).execute(-1, 0);

  # Sleep timeout
  - platform: template
    name: Timeout Sleep
    id: timeout_sleep
    entity_category: config
    unit_of_measurement: 's'
    min_value: 0
    max_value: 3600
    step: 1
    initial_value: 120.0
    restore_value: true
    optimistic: true
    on_value:
      then:
        - lambda: |-
            //  reset last interaction
            id(update_last_interaction).execute(-1, id(timeout_dim).state + id(duration_dim).state - 0.1);


# Sensor Configuration
sensor:

  # Current page
  # this sensor will get updated when a page change event occured
  - platform: template
    name: Page
    id: page
    internal: false # don't expose too much updates
    accuracy_decimals: 0
    update_interval: never

  # Touch X coordinates
  - platform: nextion
    nextion_id: haui_disp
    name: "Touch X"
    id: touch_x
    variable_name: tch0
    update_interval: 100ms
    accuracy_decimals: 0
    internal: false # don't expose too much updates
    filters:
      # Allow to pass the value only if the value changed
      - lambda: |-
          if (int(id(touch_x).state) != int(x)) {
            id(update_last_interaction).execute(-1, 0);
            return int(x);
          } else {
            return {};
          }

  # Touch Y coordinates
  - platform: nextion
    nextion_id: haui_disp
    name: "Touch Y"
    id: touch_y
    variable_name: tch1
    update_interval: 100ms
    accuracy_decimals: 0
    internal: false # don't expose too much updates
    filters:
      # Allow to pass the value only if the value changed
      - lambda: |-
          if (int(id(touch_y).state) != int(x)) {
            id(update_last_interaction).execute(-1, 0);
            return int(x);
          } else {
            return {};
          }

  # Last Interaction
  # timestamp with last time an interaction happened
  - platform: template
    id: last_interaction
    name: Last Interaction
    update_interval: never
    accuracy_decimals: 0
    internal: false # don't expose too much updates
    on_value:
        - lambda: |-
            id(update_last_interaction).execute(x, 0);

  # Internal brightness set
  - platform: template
    id: brightness
    name: Brightness
    internal: false
    accuracy_decimals: 0
    update_interval: never

  # Current brightness from display
  - platform: nextion
    nextion_id: haui_disp
    id: current_brightness
    name: Current Brightness
    internal: false
    accuracy_decimals: 0
    update_interval: 100ms
    variable_name: dim
    filters:
      - lambda: |-
          if (id(current_brightness).state != x) {
            return x;
          } else {
            return {};
          }


# Switch Configuration
switch:

  # Display Always On
  # this will make sure that the display is always on
  - platform: gpio
    name: Screen Power
    id: screen_power
    entity_category: config
    restore_mode: ALWAYS_ON
    internal: false
    pin:
      number: 4
      inverted: true

  # Should buttons be used for last interaction
  - platform: template
    name: Use Button Interaction
    id: use_button_interaction
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true

  # Should auto-dimming be used
  - platform: template
    name: Use Auto-Dimming
    id: use_auto_dimming
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true

  # Physical switch left
  - platform: gpio
    name: Relay Left
    id: relay_left
    pin:
      number: 22

  # Physical switch right
  - platform: gpio
    name: Relay Right
    id: relay_right
    pin:
      number: 19


# Binary Sensor Configuration
binary_sensor:

  # Touch state
  # on when touch is active, off if not active
  - platform: template
    name: Touch
    id: touch
    internal: false

  #  Physical hardware button below display to toggle relay
  - platform: gpio
    name: Button Left
    id: button_left
    pin:
      number: 14
      inverted: true
    on_click:
      then:
        - lambda: |-
            if (id(use_button_interaction).state) {
              id(update_last_interaction).execute(-1, 0);
            }
        - switch.toggle: relay_left

  # Physical hardware button below display to toggle relay
  - platform: gpio
    name: Button Right
    id: button_right
    pin:
      number: 27
      inverted: true
    on_click:
      then:
        - lambda: |-
            if (id(use_button_interaction).state) {
              id(update_last_interaction).execute(-1, 0);
            }
        - switch.toggle: relay_right
