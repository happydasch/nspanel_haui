# Display
display:

  - platform: nspanel_haui
    uart_id: haui_uart
    id: haui_disp
    # default url
    tft_url: $tft_update_url
    # set the nextion manually as initialized
    on_setup:
      then:
        # Restore brightness on display
        - number.set:
            id: brightness_full
            value: !lambda return int(id(brightness_full).state);
        # Restore dimmed brightness on display
        - number.set:
            id: brightness_dimmed
            value: !lambda return int(id(brightness_dimmed).state);
        # notify about initialization
        - lambda: |-
              id(play_sound).execute("startup");
        # set as initialized
        - lambda: |-
              ESP_LOGD("haui", "NSPanel HAUI Init");
              id(update_last_interaction).execute(-1);
              id(haui_init) = true;
        # set tft version
        - delay: 1s
        - lambda: |-
              auto version = id(haui_disp).get_component_txt("settings.tftVersion", "0.0.0");
              id(tft_version).publish_state(version);
    on_page:
      then:
        - lambda: |-
            ESP_LOGD("haui", "on_page %d", x);
            id(page).publish_state(x);
    on_touch:
      then:
        - lambda: |-
            // on start touch set initial coordinates
            if (state) {
              id(touch_x).publish_state(x);
              id(touch_y).publish_state(y);
            }
            id(touch).publish_state(state);
            // update last interaction time
            id(update_last_interaction).execute(-1);
    on_component:
      then:
        - lambda: |-
            std::string touch_event = to_string(p_id) + "," + to_string(c_id);
            touch_event += "," + to_string((uint8_t)state);
            id(publish_event).execute("component", touch_event);

