---
# Sensor Configuration
sensor:

  # Current page
  # using the dp variable from nextion so no need to synchronize
  # this value, it contains the page id
  - platform: template
    name: Page
    id: page
    internal: true # don't expose too much updates
    accuracy_decimals: 0
    update_interval: never
    on_value:
      then:
        - lambda: |-
            id(publish_event).execute("page", to_string((uint8_t)x));

  # Current brightness
  - platform: template
    name: Brightness
    id: brightness
    internal: true # don't expose too much updates
    accuracy_decimals: 0
    update_interval: 500ms
    lambda: |-
      // check the current brightness against device brightness
      if (id(haui_disp).is_sleeping()) {
        if (id(brightness).state != 0) {
          return 0;
        }
      } else {
        int brightness_val = id(haui_disp).get_int_value("dim", id(brightness).state);
        if (id(brightness).state != brightness_val) {
          return brightness_val;
        }
      }
      return {};

  # Touch X coordinates
  - platform: template
    name: Touch X
    id: touch_x
    internal: true  # don't expose too much updates
    accuracy_decimals: 0
    update_interval: never
    filters:
      # Allow to pass the value only if the value changed
      - lambda: |-
          if (int(id(touch_x).state) != int(x)) {
            return int(x);
          } else {
            return {};
          }

  # Touch Y coordinates
  - platform: template
    name: Touch Y
    id: touch_y
    internal: true  # don't expose too much updates
    accuracy_decimals: 0
    update_interval: never
    filters:
      # Allow to pass the value only if the value changed
      - lambda: |-
          if (int(id(touch_y).state) != int(x)) {
            return int(x);
          } else {
            return {};
          }

  # Last Interaction
  - platform: template
    name: Last Interaction
    id: last_interaction
    update_interval: never
    accuracy_decimals: 0
    internal: true  # don't expose too much updates
    on_value:
        - lambda: |-
            id(update_last_interaction).execute(x);

  # Uptime
  - platform: uptime
    name: Uptime
    disabled_by_default: true

  # WIFI Signal stregth
  - platform: wifi_signal
    name: RSSI
    update_interval: 60s

  # Internal temperature sensor, ADC value
  - platform: adc
    name: ADC
    id: ntc_source
    pin: 38
    update_interval: 60s
    attenuation: 11db
    entity_category: diagnostic
    disabled_by_default: true

  # Internal temperature sensor
  # ADC reading converted to resistance (calculation)
  - platform: resistance
    name: Resistance
    id: resistance_sensor
    sensor: ntc_source
    entity_category: diagnostic
    configuration: DOWNSTREAM
    resistor: 11.2kOhm
    disabled_by_default: true

  # Internal temperature sensor
  # resistance to temperature (calculation)
  - platform: ntc
    name: Temperature
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25Â°C
      reference_resistance: 10kOhm
    filters:
      # add offset to value
      - lambda: return x + id(temperature_correction).state;
